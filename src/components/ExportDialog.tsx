import React from 'react'
import { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { Label } from '@/components/ui/label'
import { Download, Copy, FileText, ChatCircle, Robot, Code } from '@phosphor-icons/react'
import { toast } from 'sonner'

type CreationType = 'character' | 'scenario' | 'game' | 'prompt'

interface ExportDialogProps {
  open: boolean
  onOpenChange: (open: boolean) => void
  content: string
  type: CreationType
  title: string
}

interface ExportFormat {
  id: string
  name: string
  description: string
  icon: React.ComponentType<any>
  fileExtension: string
  formatter: (content: string, title: string, type: CreationType) => string
}

const exportFormats: ExportFormat[] = [
  {
    id: 'sillytavern',
    name: 'SillyTavern',
    description: 'Character card format for SillyTavern',
    icon: ChatCircle,
    fileExtension: 'json',
    formatter: (content, title, type) => {
      if (type !== 'character') {
        return JSON.stringify({
          name: title,
          description: content,
          personality: '',
          scenario: content,
          first_mes: `Hello! I'm here to help with your ${type}.`,
          mes_example: '',
          creatorcomment: `Generated by AI Creative Generator - ${type}`,
          avatar: 'none',
          chat: title,
          talkativeness: '0.5',
          fav: false,
          tags: [type, 'ai-generated']
        }, null, 2)
      }
      
      return JSON.stringify({
        name: title,
        description: content,
        personality: content.includes('Personality:') ? content.split('Personality:')[1].split('\n')[0] : '',
        scenario: content.includes('Background:') ? content.split('Background:')[1].split('\n')[0] : '',
        first_mes: `Hello! I'm ${title}. Nice to meet you.`,
        mes_example: '',
        creatorcomment: 'Generated by AI Creative Generator',
        avatar: 'none',
        chat: title,
        talkativeness: '0.5',
        fav: false,
        tags: ['character', 'ai-generated']
      }, null, 2)
    }
  },
  {
    id: 'chatgpt',
    name: 'ChatGPT Custom Instructions',
    description: 'Custom instructions format for ChatGPT',
    icon: Robot,
    fileExtension: 'txt',
    formatter: (content, title, type) => {
      return `# ${title} - ${type.charAt(0).toUpperCase() + type.slice(1)}

## Custom Instructions for ChatGPT

Please use this ${type} in our conversation:

${content}

---
Generated by AI Creative Generator`
    }
  },
  {
    id: 'claude',
    name: 'Claude Project',
    description: 'Project knowledge format for Claude',
    icon: Robot,
    fileExtension: 'md',
    formatter: (content, title, type) => {
      return `# ${title}

**Type:** ${type.charAt(0).toUpperCase() + type.slice(1)}
**Generated by:** AI Creative Generator

## Content

${content}

## Usage Instructions

This ${type} has been specifically designed for use with Claude. You can reference this content in your conversations by mentioning "${title}" or asking about the ${type} details.`
    }
  },
  {
    id: 'foundry',
    name: 'Foundry VTT',
    description: 'JSON format for Foundry Virtual Tabletop',
    icon: Code,
    fileExtension: 'json',
    formatter: (content, title, type) => {
      if (type === 'character') {
        return JSON.stringify({
          name: title,
          type: 'npc',
          data: {
            attributes: {},
            details: {
              biography: {
                value: content,
                public: true
              }
            }
          },
          flags: {
            'ai-generator': {
              generated: true,
              type: type
            }
          }
        }, null, 2)
      }
      
      return JSON.stringify({
        name: title,
        type: 'journalEntry',
        content: content,
        flags: {
          'ai-generator': {
            generated: true,
            type: type
          }
        }
      }, null, 2)
    }
  },
  {
    id: 'markdown',
    name: 'Markdown Document',
    description: 'Universal markdown format',
    icon: FileText,
    fileExtension: 'md',
    formatter: (content, title, type) => {
      return `# ${title}

**Type:** ${type.charAt(0).toUpperCase() + type.slice(1)}  
**Generated:** ${new Date().toLocaleDateString()}  
**Created with:** AI Creative Generator

---

${content}

---

*This ${type} was generated using AI Creative Generator. Feel free to modify and adapt it for your needs.*`
    }
  },
  {
    id: 'plain',
    name: 'Plain Text',
    description: 'Simple text file format',
    icon: FileText,
    fileExtension: 'txt',
    formatter: (content, title, type) => {
      return `${title} - ${type.charAt(0).toUpperCase() + type.slice(1)}
Generated: ${new Date().toLocaleDateString()}
Created with: AI Creative Generator

${content}`
    }
  }
]

export default function ExportDialog({ open, onOpenChange, content, type, title }: ExportDialogProps) {
  const [selectedFormat, setSelectedFormat] = useState<string>('markdown')
  const [formattedContent, setFormattedContent] = useState<string>('')

  const handleFormatSelect = (formatId: string) => {
    setSelectedFormat(formatId)
    const format = exportFormats.find(f => f.id === formatId)
    if (format) {
      const formatted = format.formatter(content, title, type)
      setFormattedContent(formatted)
    }
  }

  const handleDownload = () => {
    const format = exportFormats.find(f => f.id === selectedFormat)
    if (!format) return

    const formatted = format.formatter(content, title, type)
    const blob = new Blob([formatted], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `${title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.${format.fileExtension}`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
    
    toast.success(`Downloaded as ${format.name} format!`)
  }

  const handleCopy = async () => {
    const format = exportFormats.find(f => f.id === selectedFormat)
    if (!format) return

    const formatted = format.formatter(content, title, type)
    
    try {
      await navigator.clipboard.writeText(formatted)
      toast.success('Formatted content copied to clipboard!')
    } catch (error) {
      toast.error('Failed to copy content')
    }
  }

  // Auto-select format and generate preview when dialog opens
  useEffect(() => {
    if (open && selectedFormat) {
      handleFormatSelect(selectedFormat)
    }
  }, [open, content, title, type])

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle>Export Your {type.charAt(0).toUpperCase() + type.slice(1)}</DialogTitle>
          <DialogDescription>
            Choose a format to export "{title}" for use in your preferred platform
          </DialogDescription>
        </DialogHeader>

        <div className="flex-1 overflow-hidden grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Format Selection */}
          <div className="space-y-4">
            <Label className="text-base font-medium">Choose Export Format</Label>
            <div className="space-y-2 max-h-80 overflow-y-auto">
              {exportFormats.map((format) => {
                const Icon = format.icon
                const isRecommended = (
                  (type === 'character' && format.id === 'sillytavern') ||
                  (type === 'prompt' && format.id === 'chatgpt') ||
                  (type === 'scenario' && format.id === 'foundry') ||
                  (type === 'game' && format.id === 'markdown')
                )
                
                return (
                  <Card
                    key={format.id}
                    className={`cursor-pointer transition-all hover:shadow-md ${
                      selectedFormat === format.id ? 'ring-2 ring-primary bg-primary/5' : ''
                    }`}
                    onClick={() => handleFormatSelect(format.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-start gap-3">
                        <Icon size={20} className="mt-0.5 text-primary" />
                        <div className="flex-1">
                          <div className="flex items-center gap-2">
                            <span className="font-medium">{format.name}</span>
                            {isRecommended && (
                              <Badge variant="secondary" className="text-xs">
                                Recommended
                              </Badge>
                            )}
                          </div>
                          <p className="text-sm text-muted-foreground mt-1">
                            {format.description}
                          </p>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                )
              })}
            </div>
          </div>

          {/* Preview */}
          <div className="space-y-4">
            <Label className="text-base font-medium">Preview</Label>
            <div className="border rounded-lg h-80 overflow-hidden flex flex-col">
              <div className="bg-muted px-3 py-2 border-b">
                <span className="text-sm font-medium">
                  {exportFormats.find(f => f.id === selectedFormat)?.name} Format
                </span>
              </div>
              <Textarea
                value={formattedContent}
                readOnly
                className="flex-1 resize-none border-0 rounded-none focus-visible:ring-0"
                placeholder="Select a format to see preview..."
              />
            </div>
          </div>
        </div>

        {/* Actions */}
        <div className="flex justify-between pt-4 border-t">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" onClick={handleCopy}>
              <Copy size={16} className="mr-2" />
              Copy
            </Button>
            <Button onClick={handleDownload}>
              <Download size={16} className="mr-2" />
              Download
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}